// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ConnectionParameters, unionToConnectionParameters, unionListToConnectionParameters } from '../document/connection-parameters.js';
import { ConnectorTypes } from '../enum/connector-types.js';


/**
 * Database connection options structure.
 */
export class ConnectionOptions {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConnectionOptions {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectionOptions(bb:flatbuffers.ByteBuffer, obj?:ConnectionOptions):ConnectionOptions {
  return (obj || new ConnectionOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectionOptions(bb:flatbuffers.ByteBuffer, obj?:ConnectionOptions):ConnectionOptions {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectionOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

connector():ConnectorTypes {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ConnectorTypes.Postgres;
}

parametersType():ConnectionParameters {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ConnectionParameters.NONE;
}

parameters<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startConnectionOptions(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addConnector(builder:flatbuffers.Builder, connector:ConnectorTypes) {
  builder.addFieldInt8(0, connector, ConnectorTypes.Postgres);
}

static addParametersType(builder:flatbuffers.Builder, parametersType:ConnectionParameters) {
  builder.addFieldInt8(1, parametersType, ConnectionParameters.NONE);
}

static addParameters(builder:flatbuffers.Builder, parametersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, parametersOffset, 0);
}

static endConnectionOptions(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConnectionOptions(builder:flatbuffers.Builder, connector:ConnectorTypes, parametersType:ConnectionParameters, parametersOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConnectionOptions.startConnectionOptions(builder);
  ConnectionOptions.addConnector(builder, connector);
  ConnectionOptions.addParametersType(builder, parametersType);
  ConnectionOptions.addParameters(builder, parametersOffset);
  return ConnectionOptions.endConnectionOptions(builder);
}
}
