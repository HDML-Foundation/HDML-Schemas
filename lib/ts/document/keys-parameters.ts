// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

/**
 * Keys (joins) filter parameters.
 */
export class KeysParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):KeysParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKeysParameters(bb:flatbuffers.ByteBuffer, obj?:KeysParameters):KeysParameters {
  return (obj || new KeysParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKeysParameters(bb:flatbuffers.ByteBuffer, obj?:KeysParameters):KeysParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KeysParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

left():string|null
left(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
left(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

right():string|null
right(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
right(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startKeysParameters(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLeft(builder:flatbuffers.Builder, leftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, leftOffset, 0);
}

static addRight(builder:flatbuffers.Builder, rightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rightOffset, 0);
}

static endKeysParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createKeysParameters(builder:flatbuffers.Builder, leftOffset:flatbuffers.Offset, rightOffset:flatbuffers.Offset):flatbuffers.Offset {
  KeysParameters.startKeysParameters(builder);
  KeysParameters.addLeft(builder, leftOffset);
  KeysParameters.addRight(builder, rightOffset);
  return KeysParameters.endKeysParameters(builder);
}
}
