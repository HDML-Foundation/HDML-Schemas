// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilterName } from '../enum/filter-name.js';


/**
 * Named filter parameters.
 */
export class NamedParameters {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NamedParameters {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNamedParameters(bb:flatbuffers.ByteBuffer, obj?:NamedParameters):NamedParameters {
  return (obj || new NamedParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNamedParameters(bb:flatbuffers.ByteBuffer, obj?:NamedParameters):NamedParameters {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NamedParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():FilterName {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FilterName.Equals;
}

field():string|null
field(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
field(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

values(index: number):string
values(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
values(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startNamedParameters(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, name:FilterName) {
  builder.addFieldInt8(0, name, FilterName.Equals);
}

static addField(builder:flatbuffers.Builder, fieldOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fieldOffset, 0);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endNamedParameters(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNamedParameters(builder:flatbuffers.Builder, name:FilterName, fieldOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  NamedParameters.startNamedParameters(builder);
  NamedParameters.addName(builder, name);
  NamedParameters.addField(builder, fieldOffset);
  NamedParameters.addValues(builder, valuesOffset);
  return NamedParameters.endNamedParameters(builder);
}
}
