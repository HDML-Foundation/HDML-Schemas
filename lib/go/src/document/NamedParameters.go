// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "enum"
)

/// Named filter parameters.
type NamedParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsNamedParameters(buf []byte, offset flatbuffers.UOffsetT) *NamedParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NamedParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishNamedParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNamedParameters(buf []byte, offset flatbuffers.UOffsetT) *NamedParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NamedParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNamedParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NamedParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NamedParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NamedParameters) Name() enum.FilterName {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return enum.FilterName(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NamedParameters) MutateName(n enum.FilterName) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *NamedParameters) Field() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NamedParameters) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NamedParameters) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NamedParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func NamedParametersAddName(builder *flatbuffers.Builder, name enum.FilterName) {
	builder.PrependInt8Slot(0, int8(name), 0)
}
func NamedParametersAddField(builder *flatbuffers.Builder, field flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(field), 0)
}
func NamedParametersAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(values), 0)
}
func NamedParametersStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NamedParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
