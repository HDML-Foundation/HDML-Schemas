// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "github.com/HDML-Foundation/HDML-Schemas/lib/go/enum"
)

/// Single filter structure.
type FilterStruct struct {
	_tab flatbuffers.Table
}

func GetRootAsFilterStruct(buf []byte, offset flatbuffers.UOffsetT) *FilterStruct {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FilterStruct{}
	x.Init(buf, n+offset)
	return x
}

func FinishFilterStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFilterStruct(buf []byte, offset flatbuffers.UOffsetT) *FilterStruct {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FilterStruct{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFilterStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FilterStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FilterStruct) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FilterStruct) Type() enum.FilterTypeEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return enum.FilterTypeEnum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FilterStruct) MutateType(n enum.FilterTypeEnum) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *FilterStruct) OptionsType() FilterOptionsStruct {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return FilterOptionsStruct(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FilterStruct) MutateOptionsType(n FilterOptionsStruct) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *FilterStruct) Options(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func FilterStructStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FilterStructAddType(builder *flatbuffers.Builder, type_ enum.FilterTypeEnum) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func FilterStructAddOptionsType(builder *flatbuffers.Builder, optionsType FilterOptionsStruct) {
	builder.PrependByteSlot(1, byte(optionsType), 0)
}
func FilterStructAddOptions(builder *flatbuffers.Builder, options flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(options), 0)
}
func FilterStructEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
