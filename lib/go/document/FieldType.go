// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "enum"
)

/// Field type structure.
type FieldType struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldType(buf []byte, offset flatbuffers.UOffsetT) *FieldType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldType{}
	x.Init(buf, n+offset)
	return x
}

func FinishFieldTypeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFieldType(buf []byte, offset flatbuffers.UOffsetT) *FieldType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFieldTypeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FieldType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldType) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldType) Type() enum.DataType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return enum.DataType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldType) MutateType(n enum.DataType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *FieldType) OptionsType() DataTypeOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return DataTypeOptions(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldType) MutateOptionsType(n DataTypeOptions) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *FieldType) Options(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func FieldTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FieldTypeAddType(builder *flatbuffers.Builder, type_ enum.DataType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func FieldTypeAddOptionsType(builder *flatbuffers.Builder, optionsType DataTypeOptions) {
	builder.PrependByteSlot(1, byte(optionsType), 0)
}
func FieldTypeAddOptions(builder *flatbuffers.Builder, options flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(options), 0)
}
func FieldTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
