// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "github.com/HDML-Foundation/HDML-Schemas/lib/go/enum"
)

/// Decimal data type parameters structure.
type DecimalParametersStruct struct {
	_tab flatbuffers.Table
}

func GetRootAsDecimalParametersStruct(buf []byte, offset flatbuffers.UOffsetT) *DecimalParametersStruct {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DecimalParametersStruct{}
	x.Init(buf, n+offset)
	return x
}

func FinishDecimalParametersStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDecimalParametersStruct(buf []byte, offset flatbuffers.UOffsetT) *DecimalParametersStruct {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DecimalParametersStruct{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDecimalParametersStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DecimalParametersStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DecimalParametersStruct) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DecimalParametersStruct) Nullable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DecimalParametersStruct) MutateNullable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *DecimalParametersStruct) Scale() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DecimalParametersStruct) MutateScale(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *DecimalParametersStruct) Precision() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DecimalParametersStruct) MutatePrecision(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *DecimalParametersStruct) BitWidth() enum.DecimalBitWidthEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return enum.DecimalBitWidthEnum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DecimalParametersStruct) MutateBitWidth(n enum.DecimalBitWidthEnum) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func DecimalParametersStructStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DecimalParametersStructAddNullable(builder *flatbuffers.Builder, nullable bool) {
	builder.PrependBoolSlot(0, nullable, false)
}
func DecimalParametersStructAddScale(builder *flatbuffers.Builder, scale uint16) {
	builder.PrependUint16Slot(1, scale, 0)
}
func DecimalParametersStructAddPrecision(builder *flatbuffers.Builder, precision uint16) {
	builder.PrependUint16Slot(2, precision, 0)
}
func DecimalParametersStructAddBitWidth(builder *flatbuffers.Builder, bitWidth enum.DecimalBitWidthEnum) {
	builder.PrependInt8Slot(3, int8(bitWidth), 0)
}
func DecimalParametersStructEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
