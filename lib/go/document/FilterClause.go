// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "github.com/HDML-Foundation/HDML-Schemas/lib/go/enum"
)

/// Filter clause structure.
type FilterClause struct {
	_tab flatbuffers.Table
}

func GetRootAsFilterClause(buf []byte, offset flatbuffers.UOffsetT) *FilterClause {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FilterClause{}
	x.Init(buf, n+offset)
	return x
}

func FinishFilterClauseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFilterClause(buf []byte, offset flatbuffers.UOffsetT) *FilterClause {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FilterClause{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFilterClauseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FilterClause) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FilterClause) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FilterClause) Type() enum.FilterOperator {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return enum.FilterOperator(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FilterClause) MutateType(n enum.FilterOperator) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *FilterClause) Filters(obj *Filter, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FilterClause) FiltersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FilterClause) Children(obj *FilterClause, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FilterClause) ChildrenLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func FilterClauseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FilterClauseAddType(builder *flatbuffers.Builder, type_ enum.FilterOperator) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func FilterClauseAddFilters(builder *flatbuffers.Builder, filters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(filters), 0)
}
func FilterClauseStartFiltersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FilterClauseAddChildren(builder *flatbuffers.Builder, children flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(children), 0)
}
func FilterClauseStartChildrenVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FilterClauseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
