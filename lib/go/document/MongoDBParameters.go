// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Parameters to connect to the MongoDB.
type MongoDBParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsMongoDBParameters(buf []byte, offset flatbuffers.UOffsetT) *MongoDBParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MongoDBParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishMongoDBParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMongoDBParameters(buf []byte, offset flatbuffers.UOffsetT) *MongoDBParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MongoDBParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMongoDBParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MongoDBParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MongoDBParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MongoDBParameters) Host() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MongoDBParameters) Port() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MongoDBParameters) MutatePort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *MongoDBParameters) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MongoDBParameters) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MongoDBParameters) Schema() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MongoDBParameters) Ssl() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MongoDBParameters) MutateSsl(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func MongoDBParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MongoDBParametersAddHost(builder *flatbuffers.Builder, host flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(host), 0)
}
func MongoDBParametersAddPort(builder *flatbuffers.Builder, port uint16) {
	builder.PrependUint16Slot(1, port, 0)
}
func MongoDBParametersAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(user), 0)
}
func MongoDBParametersAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(password), 0)
}
func MongoDBParametersAddSchema(builder *flatbuffers.Builder, schema flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(schema), 0)
}
func MongoDBParametersAddSsl(builder *flatbuffers.Builder, ssl bool) {
	builder.PrependBoolSlot(5, ssl, false)
}
func MongoDBParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
