// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "github.com/HDML-Foundation/HDML-Schemas/lib/go/enum"
)

/// Join structure.
type Join struct {
	_tab flatbuffers.Table
}

func GetRootAsJoin(buf []byte, offset flatbuffers.UOffsetT) *Join {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Join{}
	x.Init(buf, n+offset)
	return x
}

func FinishJoinBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsJoin(buf []byte, offset flatbuffers.UOffsetT) *Join {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Join{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedJoinBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Join) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Join) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Join) Type() enum.JoinType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return enum.JoinType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Join) MutateType(n enum.JoinType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Join) Left() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Join) Right() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Join) Clause(obj *FilterClause) *FilterClause {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FilterClause)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func JoinStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func JoinAddType(builder *flatbuffers.Builder, type_ enum.JoinType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func JoinAddLeft(builder *flatbuffers.Builder, left flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(left), 0)
}
func JoinAddRight(builder *flatbuffers.Builder, right flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(right), 0)
}
func JoinAddClause(builder *flatbuffers.Builder, clause flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(clause), 0)
}
func JoinEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
