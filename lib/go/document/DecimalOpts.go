// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "enum"
)

/// Decimal data type options structure.
type DecimalOpts struct {
	_tab flatbuffers.Table
}

func GetRootAsDecimalOpts(buf []byte, offset flatbuffers.UOffsetT) *DecimalOpts {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DecimalOpts{}
	x.Init(buf, n+offset)
	return x
}

func FinishDecimalOptsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDecimalOpts(buf []byte, offset flatbuffers.UOffsetT) *DecimalOpts {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DecimalOpts{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDecimalOptsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DecimalOpts) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DecimalOpts) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DecimalOpts) Nullable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DecimalOpts) MutateNullable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *DecimalOpts) Scale() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DecimalOpts) MutateScale(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *DecimalOpts) Precision() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DecimalOpts) MutatePrecision(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *DecimalOpts) BitWidth() enum.DecBitWidth {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return enum.DecBitWidth(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DecimalOpts) MutateBitWidth(n enum.DecBitWidth) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func DecimalOptsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DecimalOptsAddNullable(builder *flatbuffers.Builder, nullable bool) {
	builder.PrependBoolSlot(0, nullable, false)
}
func DecimalOptsAddScale(builder *flatbuffers.Builder, scale uint16) {
	builder.PrependUint16Slot(1, scale, 0)
}
func DecimalOptsAddPrecision(builder *flatbuffers.Builder, precision uint16) {
	builder.PrependUint16Slot(2, precision, 0)
}
func DecimalOptsAddBitWidth(builder *flatbuffers.Builder, bitWidth enum.DecBitWidth) {
	builder.PrependInt8Slot(3, int8(bitWidth), 0)
}
func DecimalOptsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
