// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "enum"
)

/// Time data type options structure.
type TimeOpts struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeOpts(buf []byte, offset flatbuffers.UOffsetT) *TimeOpts {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeOpts{}
	x.Init(buf, n+offset)
	return x
}

func FinishTimeOptsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTimeOpts(buf []byte, offset flatbuffers.UOffsetT) *TimeOpts {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TimeOpts{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTimeOptsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TimeOpts) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeOpts) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeOpts) Nullable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TimeOpts) MutateNullable(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *TimeOpts) Unit() enum.TimeUnit {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return enum.TimeUnit(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TimeOpts) MutateUnit(n enum.TimeUnit) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func TimeOptsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TimeOptsAddNullable(builder *flatbuffers.Builder, nullable bool) {
	builder.PrependBoolSlot(0, nullable, false)
}
func TimeOptsAddUnit(builder *flatbuffers.Builder, unit enum.TimeUnit) {
	builder.PrependInt8Slot(1, int8(unit), 0)
}
func TimeOptsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
