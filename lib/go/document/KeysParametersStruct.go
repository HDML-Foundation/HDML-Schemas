// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Keys (joins) filter parameters.
type KeysParametersStruct struct {
	_tab flatbuffers.Table
}

func GetRootAsKeysParametersStruct(buf []byte, offset flatbuffers.UOffsetT) *KeysParametersStruct {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KeysParametersStruct{}
	x.Init(buf, n+offset)
	return x
}

func FinishKeysParametersStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsKeysParametersStruct(buf []byte, offset flatbuffers.UOffsetT) *KeysParametersStruct {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &KeysParametersStruct{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedKeysParametersStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *KeysParametersStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KeysParametersStruct) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KeysParametersStruct) Left() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KeysParametersStruct) Right() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func KeysParametersStructStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func KeysParametersStructAddLeft(builder *flatbuffers.Builder, left flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(left), 0)
}
func KeysParametersStructAddRight(builder *flatbuffers.Builder, right flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(right), 0)
}
func KeysParametersStructEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
