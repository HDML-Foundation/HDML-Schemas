// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"

	enum "github.com/HDML-Foundation/HDML-Schemas/lib/go/enum"
)

/// Data field structure.
type FieldStruct struct {
	_tab flatbuffers.Table
}

func GetRootAsFieldStruct(buf []byte, offset flatbuffers.UOffsetT) *FieldStruct {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FieldStruct{}
	x.Init(buf, n+offset)
	return x
}

func FinishFieldStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFieldStruct(buf []byte, offset flatbuffers.UOffsetT) *FieldStruct {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FieldStruct{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFieldStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FieldStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FieldStruct) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FieldStruct) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldStruct) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldStruct) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldStruct) Clause() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FieldStruct) Type(obj *FieldTypeStruct) *FieldTypeStruct {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FieldTypeStruct)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *FieldStruct) Aggregation() enum.AggregationTypeEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return enum.AggregationTypeEnum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldStruct) MutateAggregation(n enum.AggregationTypeEnum) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

func (rcv *FieldStruct) Order() enum.OrderTypeEnum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return enum.OrderTypeEnum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *FieldStruct) MutateOrder(n enum.OrderTypeEnum) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

func FieldStructStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func FieldStructAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func FieldStructAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func FieldStructAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origin), 0)
}
func FieldStructAddClause(builder *flatbuffers.Builder, clause flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(clause), 0)
}
func FieldStructAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func FieldStructAddAggregation(builder *flatbuffers.Builder, aggregation enum.AggregationTypeEnum) {
	builder.PrependInt8Slot(5, int8(aggregation), 0)
}
func FieldStructAddOrder(builder *flatbuffers.Builder, order enum.OrderTypeEnum) {
	builder.PrependInt8Slot(6, int8(order), 0)
}
func FieldStructEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
