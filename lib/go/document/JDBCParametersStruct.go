// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package document

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Parameters to connect to one the of the following DB: Postgres,
/// MySQL, MS SQL, MariaDB, Oracle, ClickHouse, Druid, Ignite,
/// Redshift.
type JDBCParametersStruct struct {
	_tab flatbuffers.Table
}

func GetRootAsJDBCParametersStruct(buf []byte, offset flatbuffers.UOffsetT) *JDBCParametersStruct {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &JDBCParametersStruct{}
	x.Init(buf, n+offset)
	return x
}

func FinishJDBCParametersStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsJDBCParametersStruct(buf []byte, offset flatbuffers.UOffsetT) *JDBCParametersStruct {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &JDBCParametersStruct{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedJDBCParametersStructBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *JDBCParametersStruct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *JDBCParametersStruct) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *JDBCParametersStruct) Host() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *JDBCParametersStruct) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *JDBCParametersStruct) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *JDBCParametersStruct) Ssl() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *JDBCParametersStruct) MutateSsl(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func JDBCParametersStructStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func JDBCParametersStructAddHost(builder *flatbuffers.Builder, host flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(host), 0)
}
func JDBCParametersStructAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(user), 0)
}
func JDBCParametersStructAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(password), 0)
}
func JDBCParametersStructAddSsl(builder *flatbuffers.Builder, ssl bool) {
	builder.PrependBoolSlot(3, ssl, false)
}
func JDBCParametersStructEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
