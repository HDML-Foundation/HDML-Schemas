// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package enum

import "strconv"

/// Data types enum.
type DataTypeEnum int8

const (
	DataTypeEnumInt8      DataTypeEnum = 0
	DataTypeEnumInt16     DataTypeEnum = 1
	DataTypeEnumInt32     DataTypeEnum = 2
	DataTypeEnumInt64     DataTypeEnum = 3
	DataTypeEnumFloat32   DataTypeEnum = 4
	DataTypeEnumFloat64   DataTypeEnum = 5
	DataTypeEnumDecimal   DataTypeEnum = 6
	DataTypeEnumDate      DataTypeEnum = 7
	DataTypeEnumTime      DataTypeEnum = 8
	DataTypeEnumTimestamp DataTypeEnum = 9
	DataTypeEnumBinary    DataTypeEnum = 10
	DataTypeEnumUtf8      DataTypeEnum = 11
)

var EnumNamesDataTypeEnum = map[DataTypeEnum]string{
	DataTypeEnumInt8:      "Int8",
	DataTypeEnumInt16:     "Int16",
	DataTypeEnumInt32:     "Int32",
	DataTypeEnumInt64:     "Int64",
	DataTypeEnumFloat32:   "Float32",
	DataTypeEnumFloat64:   "Float64",
	DataTypeEnumDecimal:   "Decimal",
	DataTypeEnumDate:      "Date",
	DataTypeEnumTime:      "Time",
	DataTypeEnumTimestamp: "Timestamp",
	DataTypeEnumBinary:    "Binary",
	DataTypeEnumUtf8:      "Utf8",
}

var EnumValuesDataTypeEnum = map[string]DataTypeEnum{
	"Int8":      DataTypeEnumInt8,
	"Int16":     DataTypeEnumInt16,
	"Int32":     DataTypeEnumInt32,
	"Int64":     DataTypeEnumInt64,
	"Float32":   DataTypeEnumFloat32,
	"Float64":   DataTypeEnumFloat64,
	"Decimal":   DataTypeEnumDecimal,
	"Date":      DataTypeEnumDate,
	"Time":      DataTypeEnumTime,
	"Timestamp": DataTypeEnumTimestamp,
	"Binary":    DataTypeEnumBinary,
	"Utf8":      DataTypeEnumUtf8,
}

func (v DataTypeEnum) String() string {
	if s, ok := EnumNamesDataTypeEnum[v]; ok {
		return s
	}
	return "DataTypeEnum(" + strconv.FormatInt(int64(v), 10) + ")"
}
